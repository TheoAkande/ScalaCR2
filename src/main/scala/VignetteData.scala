package editer

class VignetteData(val entry: Entry) {

  // This is what the docs say but i can confirm that this is wrong. Dont use
  val lens_data_map = Map[String, String](
    "0x70, 0x4, 0xdf, 0x8, 0x92, 0xc, 0xca, 0xe, 0xff, 0xf" -> "EF  85mm f/1.2 L II USM        ",
    "0x70, 0x4, 0xdf, 0x8, 0x92, 0xc, 0xca, 0xe, 0xff, 0xf" -> "EF  17-40 f/4.0 L USM          ",
    "0x70, 0x4, 0xdf, 0x8, 0x92, 0xc, 0xca, 0xe, 0xff, 0xf" -> "EF  70-300 f/4.0-5.6 IS USM    ",
    "0x70, 0x4, 0xdf, 0x8, 0x92, 0xc, 0xca, 0xe, 0xff, 0xf" -> "EF  24-70 L f/2.8 USM          ",
    "0x70, 0x4, 0xdf, 0x8, 0x92, 0xc, 0xca, 0xe, 0xff, 0xf" -> "EF  70-200mm f/2.8 L IS USM    ",
    "0x38, 0x2, 0x9d, 0x9, 0x92, 0xc, 0xc, 0xe, 0xff, 0xf" -> "EF  70-200mm f/4.0 L IS USM    ",
    "0x70, 0x4, 0xdf, 0x8, 0x92, 0xc, 0xca, 0xe, 0xff, 0xf" -> "EF 100-400mm 4.5-5.6 L IS USM  ",
    "0x70, 0x4, 0xdf, 0x8, 0x92, 0xc, 0xca, 0xe, 0xff, 0xf" -> "EF 100mm f/2.8 Macro USM (190) ",
    "0x70, 0x4, 0xdf, 0x8, 0x92, 0xc, 0xc, 0xe, 0xff, 0xf" -> "EF 100mm 2.8 IS USM Macro (254)",
    "0x70, 0x4, 0xdf, 0x8, 0x92, 0xc, 0xc, 0xe, 0xff, 0xf" -> "EF  24-105mm f/4.0 L IS USM    ",
    "0x70, 0x4, 0xdf, 0x8, 0x92, 0xc, 0xc, 0xe, 0xff, 0xf" -> "EF  28-135 f/3.5-5.6 IS USM    ",
    "0x70, 0x4, 0x22, 0x8, 0xd4, 0xb, 0x4f, 0xd, 0xff, 0xf" -> "EF  28-105mm f/3.5-4.5 USM     ",
    "0xb2, 0x3, 0xea, 0x5, 0x65, 0x7, 0x22, 0x8, 0x1a, 0xa" -> "EFS 15-85mm f/3.5-5.6 IS USM   ",
    "0xb2, 0x3, 0xea, 0x5, 0x65, 0x7, 0xdf, 0x8, 0x1a, 0xa" -> "EFS 18-55 f/3.5-5.6 IS         ",
    "0xb2, 0x3, 0xea, 0x5, 0x65, 0x7, 0xdf, 0x8, 0x1a, 0xa" -> "EFS 17-55 f/2.8 IS USM         ",
    "0xb2, 0x3, 0xea, 0x5, 0x22, 0x8, 0xdf, 0x8, 0x1a, 0xa" -> "EFS 17-85 f/4-5.6 IS USM       ",
    "0xb2, 0x3, 0xea, 0x5, 0x22, 0x8, 0x9d, 0x9, 0x1a, 0xa" -> "EFS 60 f/2.8 Macro USm         ",
    "0xb2, 0x3, 0x2d, 0x5, 0xea, 0x5, 0x65, 0x7, 0x1a, 0xa" -> "EFS 18-135 f/3.5-5.6 IS        ",
    "0x38, 0x2, 0x2d, 0x5, 0x65, 0x7, 0xdf, 0x8, 0x1a, 0xa" -> "EFS 10-22 f/3.5-4.5 USM        ",
    "0xf5, 0x2, 0x65, 0x7, 0xdf, 0x8, 0x9d, 0x9, 0x1a, 0xa" -> "EFS 18-200 f/3.5-5.6 IS        ",
    "0xf5, 0x2, 0xea, 0x5, 0x5a, 0xa, 0xd4, 0xb, 0xff, 0xf" -> "EF  300mm f/2.8L IS USM (1Dm4) ",
    "0xf5, 0x2, 0xea, 0x5, 0x5a, 0xa, 0xd4, 0xb, 0xff, 0xf" -> "EF  16-35mm f/2.8L II USM(1Dm4)"
  )

  val data = entry.getBytes

  val tag_length: Int = getShortFromBytes(0x2) // Size of tag

  val normal: Boolean = getShortFromBytes(0x0) match {
    case 0x1000 => {    // regular vignette data
      if (tag_length != 116) then throw new Exception("Invalid Vignette tag length") else ()
      true     
    }
    case 0x1080 => {    // S90 or G11
      if (tag_length != 66) then throw new Exception("Invalid Vignette tag length") else ()
      false
    }
    case _      => throw new Exception("Invalid Vignette data")
  }

  val correction_applied = getShortFromBytes(0x4) == 1

  val dpp_correction = getShortFromBytes(0xc)

  val image_width = getShortFromBytes(0x16)
  val image_height = getShortFromBytes(0x18)

  val lens_data_bytes = {
    val lens_data_bytes_temp = new Array[Int](10)
    for (i <- lens_data_bytes_temp.indices) {
      lens_data_bytes_temp(i) = mask(data(i + 0x28))
    }
    lens_data_bytes_temp.map(p => f"0x$p%x").mkString(", ")
  }

  def getShortFromBytes(offset: Int): Int = {
    mask(data(offset)) | mask(data(offset + 1)) << 8
  }

  override def toString: String = {
    "Vignette data:\n" +
    s"Image Width: $image_width\n" +
    s"Image Height: $image_height\n" +
    (if (correction_applied) then "Correction applied\n" else "Correction not applied\n")
    // Don't print following because data is wrong/unreliable
    // (lens_data_map.get(lens_data_bytes) match {
    //   case Some(str: String) => str + "\n"
    //   case _         => s"Unknown lens data: $lens_data_bytes\n"
    // })
  }

}